#include <string>
#include <vector>

using namespace std;

class point {
public:
    void set(int x, int y) {m_x = x; m_y = y;};
    int m_x;
    int m_y;
};

// 여기서 x가 작은 점이 무조건 p1
class line {
private:
    double m_incline;

public:
    line(int x1, int y1, int x2, int y2) {
        if(x1 < x2) {
            m_p1.set(x1,y1);
            m_p2.set(x2,y2);  
        } else {
            m_p2.set(x1,y1);
            m_p1.set(x2,y2);
        }
        m_incline = (double)(m_p2.m_x - m_p1.m_x) / (double)(m_p2.m_y - m_p1.m_y);
    };
    
    bool hasSamePoint(point p1, point p2) {
        if(p1.m_x == m_p1.m_x && p1.m_y == m_p1.m_y) {
            return true;
        } else if (p1.m_x == m_p2.m_x && p1.m_y == m_p2.m_y) {
            return true;
        } else if (p2.m_x == m_p1.m_x && p2.m_y == m_p1.m_y) {
            return true;
        } else if (p2.m_x == m_p2.m_x && p2.m_y == m_p2.m_y) {
            return true;
        }
        return false;
    }
    
    double getIncline() {return m_incline;};

public:
    point m_p1;
    point m_p2;
    
};

int solution(vector<vector<int>> dots) {
    int answer = 0;
    vector<line> lines;
    for (int i = 0; i < dots.size() - 1 ; i++) {
        for(int j = i + 1; j < dots.size(); j++) {
            line l(dots[i][0],dots[i][1],dots[j][0],dots[j][1]);
            lines.push_back(l);
        }
    }
    
    bool found = false;
    for(int i = 0 ; (i < lines.size() - 1) && !found; i++) {
        for(int j = i + 1; j < lines.size(); j++) {
            if(lines[i].getIncline() == lines[j].getIncline()
                && !lines[i].hasSamePoint(lines[j].m_p1, lines[j].m_p2)) {
                    found = true;
                    break;
                }
        }    
    }

    return found? 1:0;
}